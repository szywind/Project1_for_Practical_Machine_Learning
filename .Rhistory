#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#Q5
trainPC <- predict(preProc, tempTrain[,-1])
modelFit <- train(tempTrain$diagnosis ~., method="glm", data=trainPC)
modelFit2 <- train(training$diagnosis ~., method="glm", data=trainPC)
modelFit
modelFit2
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#Q4
#tempTrain <- training[, grepl("^IL",names(training)[2:,],ignore.case = TRUE)]
tempTrain <- training[, grepl("^IL",names(training),ignore.case = TRUE)|grepl("diagnosis",names(training),ignore.case = TRUE)]
preProc<-preProcess(tempTrain[,-1],method="pca",thresh = 0.8)
# fitControl <- trainControl(preProcOptions = list(thresh=0.9))
# model.glm <- train(y ~ ., method="glm", trControl = fitControl, preProcess = "pca", data = training)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#Q5
trainPC <- predict(preProc, tempTrain[,-1])
modelFit <- train(tempTrain$diagnosis ~., method="glm", data=trainPC)
modelFit2 <- train(training$diagnosis ~., method="glm", data=trainPC)
modelFit
modelFit2
confusionMatrix(testing$diagnosis, predict(modelFit, testing))
confusionMatrix(testing$diagnosis, predict(modelFit2, testing))
modelFit$finalModel
modelFit2$finalModel
modelFit2
modelFit
testPC <- predict(preProc, tempTest[,-1])
confusionMatrix(testing$diagnosis, predict(modelFit, testPC))
confusionMatrix(testing$diagnosis, predict(modelFit2, testPC))
tempTest <- testing[, grepl("^IL",names(testing),ignore.case = TRUE)|grepl("diagnosis",names(testing),ignore.case = TRUE)]
testPC <- predict(preProc, tempTest[,-1])
confusionMatrix(testing$diagnosis, predict(modelFit, testPC))
confusionMatrix(testing$diagnosis, predict(modelFit2, testPC))
names(modelFit)
modelFit$trainingData
modelFit2$trainingData
modelFit2$trainingData-modelFit$trainingData
names(modelFit)
modelFit
modelFit2
modelFit$resample
modelFit2$resample
modelFit2$resample-modelFit$resample
names(modelFit)
modelFit_no_PCA <- train(tempTrain$diagnosis ~., method="glm", data= tempTrain)
confusionMatrix(testing$diagnosis, predict(modelFit_no_PCA, data = tempTest))
modelFit_no_PCA <- train(tempTrain$diagnosis ~., method="glm", data= tempTrain)
modelFit_no_PCA$finalModel
confusionMatrix(testing$diagnosis, predict(modelFit_no_PCA, data = tempTest))
predict(modelFit_no_PCA, data = tempTest)
modelFit$f
modelFit_no_PCA$f
names(tempTrain)
modelFit_no_PCA
tempTest
tempTrain
dim(tempTest)
dim(tempTrain)
modelFit_no_PCA <- train(diagnosis ~., method="glm", data= tempTrain)
confusionMatrix(testing$diagnosis, predict(modelFit_no_PCA, data = tempTest))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
tempTrain <- training[, grepl("^IL",names(training),ignore.case = TRUE)|grepl("diagnosis",names(training),ignore.case = TRUE)]
tempTest <- testing[, grepl("^IL",names(testing),ignore.case = TRUE)|grepl("diagnosis",names(testing),ignore.case = TRUE)]
dim(tempTrain)
dim(tempTest)
modelFit_no_PCA <- train(diagnosis ~., method="glm", data= tempTrain)
predict(modelFit_no_PCA, tempTest)
confusionMatrix(testing$diagnosis, predict(modelFit_no_PCA, data = tempTest))
testing$diagnosi
confusionMatrix(tempTest$diagnosis, predict(modelFit_no_PCA, data = tempTest))
confusionMatrix(testing$diagnosis, predict(modelFit_no_PCA, data = tempTest))
trainPC <- predict(preProc, tempTrain[,-1])
# Experiment 1: same "$finalModel", different "$resample"
modelFit <- train(tempTrain$diagnosis ~., method="glm", data=trainPC)
testPC <- predict(preProc, tempTest[,-1])
predict(modelFit, testPC)
confusionMatrix(testing$diagnosis, predict(modelFit, testPC))
confusionMatrix(testing$diagnosis, predict(modelFit_no_PCA, tempTest)
)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#Q4
#tempTrain <- training[, grepl("^IL",names(training)[2:,],ignore.case = TRUE)]
tempTrain <- training[, grepl("^IL",names(training),ignore.case = TRUE)|grepl("diagnosis",names(training),ignore.case = TRUE)]
tempTest <- testing[, grepl("^IL",names(testing),ignore.case = TRUE)|grepl("diagnosis",names(testing),ignore.case = TRUE)]
preProc<-preProcess(tempTrain[,-1],method="pca",thresh = 0.8)
# fitControl <- trainControl(preProcOptions = list(thresh=0.9))
# model.glm <- train(y ~ ., method="glm", trControl = fitControl, preProcess = "pca", data = training)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#Q5
trainPC <- predict(preProc, tempTrain[,-1])
testPC <- predict(preProc, tempTest[,-1])
# Experiment 1: same "$finalModel", different "$resample"
modelFit <- train(tempTrain$diagnosis ~., method="glm", data=trainPC)
modelFit2 <- train(training$diagnosis ~., method="glm", data=trainPC)
# Experiment 2: same result
confusionMatrix(testing$diagnosis, predict(modelFit, testPC))
confusionMatrix(testing$diagnosis, predict(modelFit2, testPC))
#========== No PCA
modelFit_no_PCA <- train(diagnosis ~., method="glm", data= tempTrain)
confusionMatrix(tempTest$diagnosis, predict(modelFit_no_PCA, data = tempTest))
predict(modelFit_no_PCA, data = tempTest)
confusionMatrix(testing$diagnosis, predict(modelFit, testPC))
confusionMatrix(testing$diagnosis, predict(modelFit_no_PCA, tempTest))
modelFit_no_PCA <- train(diagnosis ~., method="glm", data= tempTrain)
confusionMatrix(testing$diagnosis, predict(modelFit_no_PCA, tempTest))
modelFit_no_PCA <- train(diagnosis ~., method="glm", data= tempTrain)
confusionMatrix(testing$diagnosis, predict(modelFit_no_PCA, data=tempTest))
help(createDataPartition)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=F)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
afit <- lm(mpg~factor(cyl)+wt, data = mtcars)
predict(afit, data.frame(cyl=8, wt=1)) - predict(afit, data.frame(cyl=4, wt=1))
ufit <- lm(mpg~factor(cyl), data = mtcars)
apred <- predict(afit, data.frame(cyl=8, wt=1))
upred <- predict(ufit, data.frame(cyl=4, wt=1))
apred
upred
help(update)
fit1 <- lm(mpg~factor(cyl)+wt)
fit2 <- update(fit, mpg~factor(cyl)+wt+wt*factor(cyl))
fit1 <- lm(mpg~factor(cyl)+wt, data = mtcars)
fit2 <- update(fit, mpg~factor(cyl)+wt+wt*factor(cyl), data = mtcars)
anova(fit1,fit2)
fit1 <- lm(mpg~factor(cyl)+wt, data = mtcars)
fit2 <- update(fit, mpg~factor(cyl)+wt+wt*cyl, data = mtcars)
anova(fit1,fit2)
str(wt)
str(mtcar$wt)
str(mtcar)
str(mtcars)
help(mtcars)
I(mtcars$wt * 0.5) + factor(mtcars$cyl)
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
factor(mtcars$cyl)
lm(mpg ~ wt*0.5 + factor(cyl), data = mtcars)
lm(mpg ~ wt + factor(cyl), data = mtcars)
lm(mpg ~ I(wt*0.5) + factor(cyl), data = mtcars)
fit<-lm(mpg ~ I(wt*0.5) + factor(cyl), data = mtcars)
predict(fit,data.freame(cyl=5))
predict(fit,data.frame(cyl=5))
predict(fit,data.frame(cyl=5),wtcars)
predict(fit,data.frame(cyl=5,wt=1),wtcars)
predict(fit,data.frame(cyl=5,wt=1),wtcars)
predict(fit,data.frame(cyl=4,wt=1),wtcars)
predict(fit,data.frame(cyl=5,wt=1),mtcars)
predict(fit,data.frame(cyl=4,wt=1),mtcars)
predict(fit,data.frame(cyl=4,wt=1))
predict(fit,data.frame(cyl=5,wt=1))
predict(fit,data.frame(cyl=6,wt=1))
fit
fit1 <- lm(mpg~factor(cyl)+wt, data = mtcars)
fit2 <- update(fit1, mpg~factor(cyl)+wt+wt*cyl, data = mtcars)
anova(fit1,fit2)
anove(fit1,fit2)
fit1 <- lm(mpg~factor(cyl)+wt, data = mtcars)
fit2 <- lm(mpg~factor(cyl)+wt+wt*cyl, data = mtcars)
anova(fit1,fit2)
fit2 <- lm(mpg~factor(cyl)+wt+interaction(wt,cyl), data = mtcars)
anova(fit1,fit2)
anove(fit1,fit2)
anova(fit1,fit2)
fit1 <- lm(mpg~factor(cyl)+wt, data = mtcars)
fit2 <- lm(mpg~factor(cyl)+wt+interaction(wt,cyl), data = mtcars)
#fit2 <- update(fit1, mpg~factor(cyl)+wt+wt*cyl, data = mtcars)
#fit2 <- lm(mpg~factor(cyl)+wt+wt*cyl, data = mtcars)
anova(fit1,fit2)
help(interaction)
interaction(mtcars$cyl,mtcars$wt)
mtcars$wt
# Q5
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
names(segmentationOriginal)
inTrain = which(segmentationOriginal$Case=="Train")
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
training$Case
testing$Case
str(training)
modFit <- train(Class~.,mothed = "rpart", data = segmentationOriginal)
modFit <- train(Class~., methed = "rpart", data = training)
set.seed(125)
modFit <- train(Class~., methed = "rpart", data = training)
training
training$Class
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
inTrain = which(segmentationOriginal$Case=="Train")
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
set.seed(125)
modFit <- train(Class ~., methed = "rpart", data = training)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
inTrain = which(segmentationOriginal$Case=="Train")
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
set.seed(125)
modFit <- train(Class ~., method = "rpart", data = training)
print(modFit$finalModel)
plot(modFit$finalModel, uniform=TRUE, main="Classification Tree")
text(modFit$finalModel, use.n=TRUE, all=TURE, cex=.)
text(modFit$finalModel, use.n=TRUE, all=TURE, cex=.8)
text(modFit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
plot(modFit$finalModel, uniform=TRUE, main="Classification Tree")
text(modFit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
library(rattle)
fancyRpartPlot(modFit$finalModel)
install.packages("rattle")
library(rattle)
fancyRpartPlot(modFit$finalModel)
install.packages("rpart.plot")
library(rattle)
fancyRpartPlot(modFit$finalModel)
print(modFit$finalModel)
print(modFit$finalModel)
# Q3
library(pgmm)
data(olive)
olive = olive[,-1]
names(olive)
summary(olive)
newdata = as.data.frame(t(colMeans(olive)))
predict(modFit,newdata)
modFit <- train(Area ~., method = "rpart2", data = olive)
newdata = as.data.frame(t(colMeans(olive)))
predict(modFit,newdata)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
names(SAheart)
help(SAheart)
set.seed(13234)
modFit <- train(chd~age+alcohol+obesity+tobacco+typea+ldl, method="glm", data=SAheart)
predTr <- predict(modFit, trainSA)
predT <- predict(modFit, testSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missTr <- missClass(trainSA$chd, predTr)
missT <- missClass(testSA$chd, predT)
missTr
missT
predTr
names(predT)
set.seed(13234)
modFit <- train(chd~age+alcohol+obesity+tobacco+typea+ldl, method="glm", data=SAheart, family="binomial")
predTr <- predict(modFit, trainSA)
predT <- predict(modFit, testSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missTr <- missClass(trainSA$chd, predTr)
missT <- missClass(testSA$chd, predT)
missTr
missT
set.seed(13234)
modFit <- train(chd~age+alcohol+obesity+tobacco+typea+ldl, method="glm", data=trainSA, family="binomial")
predTr <- predict(modFit, trainSA)
predT <- predict(modFit, testSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missTr <- missClass(trainSA$chd, predTr)
missT <- missClass(testSA$chd, predT)
missTr
missT
modFit2 <- train(y~., method="rf", data=vowel.train, importance = T)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
train.y <- as.factor(train.y)
test.y <- as.factor(test.y)
set.seed(33833)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
modFit2 <- train(y~., method="rf", data=vowel.train, importance = T)
modFit2 <- train(y~., method="rf", data=vowel.train)
help(train)
forest
randomForest
?randomForest
modFit <- randomForest(y~., data=vowel.train, importance = TRUE)
importance(modFit)
imp <- importance(modFit)
imp
class(imp)
names(imp)
order(imp[,12])
order(imp[,13])
imp[order(imp[,12]),]
doc(randomForest)
help(randomForest)
modFit <- randomForest(y~., data=vowel.train, importance = TRUE, proximity=T)
imp <- importance(modFit)
imp[order(imp[,12]),]
imp[order(imp[,13]),]
set.seed(33833)
modFit <- randomForest(y~., data=vowel.train, importance = TRUE, proximity=T)
imp <- importance(modFit)
imp[order(imp[,12]),]
set.seed(33833)
modFit <- randomForest(y~., data=vowel.train, importance = TRUE, proximity=T)
imp <- importance(modFit)
imp[order(imp[,12]),]
set.seed(33833)
modFit <- randomForest(y~., data=vowel.train, importance = TRUE, proximity=T)
imp <- importance(modFit)
imp[order(imp[,12]),]
set.seed(33833)
modFit <- randomForest(y~., data=vowel.train, importance = TRUE, proximity=T)
imp <- importance(modFit)
imp[order(imp[,12]),]
set.seed(33833)
modFit <- randomForest(y~., data=vowel.train, importance = TRUE, proximity=T)
imp <- importance(modFit)
imp[order(imp[,12]),]
set.seed(33833)
modFit <- randomForest(y~., data=vowel.train, importance = TRUE, proximity=T)
imp <- importance(modFit)
imp[order(imp[,13]),]
set.seed(33833)
modFit <- randomForest(y~., data=vowel.train, importance = TRUE, proximity=T)
imp <- importance(modFit)
imp[order(imp[,13]),]
set.seed(33833)
modFit <- randomForest(y~., data=vowel.train, importance = TRUE, proximity=T)
imp <- importance(modFit)
imp[order(imp[,12]),]
imp[order(imp[,13]),]
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
modFit <- randomForest(y~., data=vowel.train, importance = TRUE, proximity=T)
imp <- importance(modFit)
imp[order(imp[,12]),]
imp[order(imp[,13]),]
?rf
?importance
set.seed(33833)
modFit <- randomForest(y~., data=vowel.train, ntree = 1000, importance = TRUE, proximity=T, keep.forest=FALSE, )
imp <- importance(modFit)
imp[order(imp[,13]),]
set.seed(33833)
modFit <- randomForest(y~., data=vowel.train, ntree = 1000, importance = TRUE, proximity=T, keep.forest=FALSE, )
imp <- importance(modFit)
imp[order(imp[,12]),]
set.seed(33833)
modFit <- randomForest(y~., data=vowel.train, ntree = 1000, importance = TRUE, proximity=T, keep.forest=FALSE, )
imp <- importance(modFit)
imp[order(imp[,13]),]
modFit <- randomForest(y~., data=vowel.train, ntree = 500, importance = TRUE, proximity=T, keep.forest=FALSE, )
imp <- importance(modFit)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
modFit <- randomForest(y~., data=vowel.train, ntree = 500, importance = TRUE, proximity=T, keep.forest=FALSE, )
imp <- importance(modFit)
imp[order(imp[,13]),]
imp[order(imp[,12]),]
imp[order(imp[,13]),]
set.seed(33833)
modFit <- randomForest(y~., data=vowel.train, ntree = 500, importance = TRUE, keep.forest=FALSE, )
imp <- importance(modFit)
imp[order(imp[,13]),]
imp[order(imp[,12]),]
set.seed(33833)
modFit <- randomForest(y~., data=vowel.train, ntree = 1000, importance = TRUE, keep.forest=FALSE, )
imp <- importance(modFit)
imp[order(imp[,13]),]
set.seed(33833)
modFit <- randomForest(y~., data=vowel.train, ntree = 1000, importance = TRUE, keep.forest=FALSE, )
imp <- importance(modFit)
imp[order(imp[,12]),]
modFit <- randomForest(y~., data=vowel.train, ntree = 500, importance = TRUE, keep.forest=FALSE, )
imp <- importance(modFit)
imp[order(imp[,13]),]
modFit <- randomForest(y~., data=vowel.train, ntree = 500, importance = TRUE, keep.forest=FALSE, )
imp <- importance(modFit)
imp[order(imp[,13]),]
modFit <- randomForest(y~., data=vowel.train, ntree = 500, importance = TRUE, keep.forest=FALSE, )
imp <- importance(modFit)
imp[order(imp[,13]),]
modFit <- randomForest(y~., data=vowel.train, ntree = 500, importance = TRUE, keep.forest=FALSE, )
imp <- importance(modFit)
imp[order(imp[,13]),]
modFit <- randomForest(y~., data=vowel.train, ntree = 500, importance = TRUE, keep.forest=FALSE, )
imp <- importance(modFit)
imp[order(imp[,13]),]
modFit <- randomForest(y~., data=vowel.train, ntree = 1000, importance = TRUE, keep.forest=FALSE, )
imp <- importance(modFit)
imp[order(imp[,13]),]
?train
??caret
?caret
??caret
modFit2 <- train(y~., method="rf", data=vowel.train, importance = T)
modFit2 <- train(y~., method="rf", data=vowel.train)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
modFit2 <- train(y~., method="rf", data=vowel.train)
train
modFit2 <- train(y~., method="glm",data=vowel.train)
modFit2 <- train(y~., method="rf",data=vowel.train)
>train
?train
getModelInfo()
getModelInfo()
modFit2 <- train(y~., method="rf", data=vowel.train, prox = T)
for (i=1:4){i}
for (i in c(1:4){i}
?`for`
for(i in 1:5) print(1:i)
rawTr <- read.csv('pml-training.csv')
rawT <- read.csv('pml-testing.csv')
setwd("/Users/shenzhenyuan/Desktop/MOOC/Coursera/JHU-Data Science/Practical Machine Learning/Course Project")
rawTr <- read.csv('pml-training.csv')
rawT <- read.csv('pml-testing.csv')
ncol(rawT)
str(rawT)
head(rawTr)
rawTr[1:3,1:7]
rawT[,1:7]
ncol(rawT)
a<-2==4
a
class(a)
featureInd <- rep(TRUE,ncol(rawT))
str(rawT)
unique(rawT$new_window)
unique(rawTr$new_window)
sapply
sapply
unique(rawTr$min_roll_arm)
unique(rawT$min_roll_arm)
length(unique(rawT$min_roll_arm))
ans <- sapply(rawT,i function(x) length(unique(x)))
ans <- sapply(rawT,i f(x) length(unique(x)))
ans <- sapply(rawT,i fun(x) length(unique(x)))
ans <- sapply(rawT,i func(x) length(unique(x)))
ans <- sapply(rawT, function(x) length(unique(x)))
ans
rawTr <- read.csv('pml-training.csv')
rawT <- read.csv('pml-testing.csv')
str(rawTr)
str(rawT)
# feature selection
featureInd <- rep(TRUE,ncol(rawT))
# By inspection, the first 7 lines was droped
featureInd[1:7] <- FALSE
#for (i in 1:ncol(rawT)) {
if (sum(!is.na(rawT[,i])))
featureInd[i] <- FALSE
else
next
}
ans <- sapply(rawT, function(x) length(unique(x)))
featureInd[ans==1] <- FALSE
featureInd
table(featureInd)
unique(rawTr$classe)
